#!/usr/bin/env python3
""" Make counts matrix """

import argparse
import logging
import sys
from typing import List, NamedTuple

import pandas as pd


class Args(NamedTuple):
    """ Command-line arguments """
    files: List[str]
    prefix: str


# --------------------------------------------------
def get_args() -> Args:
    """ Get command-line arguments """

    parser = argparse.ArgumentParser(
        description="Make counts matrix from individual counts files.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument(
        "files",
        type=str,
        nargs="+",
        help='Paths to individual counts matrix files.'
    )
    parser.add_argument(
        "-p",
        "--prefix",
        metavar="output_prefix",
        type=str,
        help="Output prefix for counts matrix and feature metadata CSV files. If not specified write only counts matrix to metadata."
    )

    args = parser.parse_args()

    if not args.prefix:
        args.prefix = sys.stdout

    return Args(args.files, args.prefix)


# --------------------------------------------------
def main() -> None:
    """ Main program """
    logging.basicConfig(level=logging.DEBUG)

    args = get_args()
    logging.debug("Counts files: %s", args.files)
    logging.debug("Output file prefix: %s", args.prefix)

    feature_counts = merge_featureCounts_counts(args.files)
    counts_matrix = extract_matrix_featureCounts(feature_counts)
    features_table = extract_features_featureCounts(feature_counts)

    write_counts(
        counts=counts_matrix,
        features=features_table,
        prefix=args.prefix
    )

# --------------------------------------------------
def write_counts(counts: pd.DataFrame, features: pd.DataFrame, prefix) -> None:
    """Write counts data

    :param counts: Counts matrix.
    :type counts: pd.DataFrame
    :param features: Feature metadata.
    :type features: pd.DataFrame
    :param prefix: File prefix name or stdout.
    :type prefix: _type_
    """
    if isinstance(prefix, str):
        out_counts = f"{prefix}.csv"
        counts.to_csv(out_counts, sep=",", index=False)
        logging.debug("Wrote counts matrix to: %s", out_counts)

        out_features = f"{prefix}_feature_metadata.csv"
        features.to_csv(out_features, sep=",", index=False)
        logging.debug("Wrote features metadata to: %s", out_features)
    elif prefix == sys.stdout:
        counts.to_csv(sys.stdout, sep=",", index=False)
        logging.debug("Wrote counts matrix to: stdout")


def extract_matrix_featureCounts(feature_counts: pd.DataFrame) -> pd.DataFrame:
    """Extract the counts matrix from featureCounts

    :param feature_counts: A merged DataFrame of featureCounts
    :type feature_counts: pd.DataFrame
    :return: Only the Geneids and counts sample columns from feature_counts, i.e. the counts matrix.
    :rtype: pd.DataFrame
    """
    # extract featureCounts counts matrix
    gene_metadata_labels = ["Chr", "Start", "End", "Strand", "Length"]

    counts = feature_counts.drop(columns=gene_metadata_labels)
    # remove the '.bam' from the end of the sample names
    counts.columns = counts.columns.str.replace("\\.bam$", "", regex=True)

    # sort columns by lexicographical order of column names 
    counts.set_index(counts.columns[0], inplace=True)
    counts = counts.reindex(sorted(counts.columns), axis=1)
    counts.reset_index(inplace=True)

    return counts


def extract_features_featureCounts(feature_counts: pd.DataFrame) -> pd.DataFrame:
    """Extract the features metadata from featureCounts

    :param feature_counts: A merged DataFrame of featureCounts.
    :type feature_counts: pd.DataFrame
    :return: Only the Geneids and features metadata.
    :rtype: pd.DataFrame
    """
    # extract featureCounts counts matrix
    gene_metadata_labels = ["Geneid", "Chr", "Start", "End", "Strand", "Length"]
    
    return feature_counts[gene_metadata_labels]


def merge_featureCounts_counts(paths: List[str]) -> pd.DataFrame:
    """Make a merged DataFrame of featureCounts counts

    :param paths: Paths to featureCounts counts files
    :type paths: List[str]
    :return: DataFrame of merged featureCounts counts
    :rtype: pd.DataFrame
    """
    gene_info_labels = ["Geneid", "Chr", "Start", "End", "Strand", "Length"]

    # read first counts file to initialize the merged counts DataFrame
    merged_counts = read_featureCounts_counts(paths[0])
    logging.debug("Counts file used to initialize merged counts: %s", paths[0])

    # read through remaining counts files and merge them into the counts DataFrame
    for counts_file in paths[1:]:
        merged_counts = merged_counts.merge(
            read_featureCounts_counts(counts_file),
            how="outer",
            on=gene_info_labels
        )
        logging.debug("Counts file merged into counts DataFrame: %s", counts_file)

    return merged_counts


def read_featureCounts_counts(path: str) -> pd.DataFrame:
    """Read a file of counts output by featureCounts into a DataFrame

    :param path: Path to featureCounts counts file
    :type path: str
    :return: DataFrame of featureCounts counts
    :rtype: pd.DataFrame
    """
    counts = pd.read_csv(path, sep="\t", comment="#")

    return counts


# --------------------------------------------------
if __name__ == '__main__':
    main()
