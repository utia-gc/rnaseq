#!/usr/bin/env python3
""" Make counts matrix """

import argparse
import logging
import sys
from typing import List, NamedTuple

import pandas as pd


class Args(NamedTuple):
    """ Command-line arguments """
    files: List[str]
    output: str


# --------------------------------------------------
def get_args() -> Args:
    """ Get command-line arguments """

    parser = argparse.ArgumentParser(
        description="Make counts matrix from individual counts files.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument(
        "files",
        type=str,
        nargs="+",
        help='Paths to individual counts matrix files.'
    )
    parser.add_argument(
        "-o",
        "--output",
        metavar="output_file",
        type=str,
        help='Output filename for counts matrix. Write to stdout if not specified.'
    )

    args = parser.parse_args()

    return Args(args.files, args.output)


# --------------------------------------------------
def main() -> None:
    """ Main program """

    logging.basicConfig(level=logging.DEBUG)

    args = get_args()
    logging.debug("Counts files: %s", args.files)
    logging.debug("Output file: %s", args.output)

    feature_counts = merge_featureCounts_counts(args.files)
    counts_matrix = extract_matrix_featureCounts(feature_counts)
    features_table = extract_features_featureCounts(feature_counts)
    
    counts_matrix.head().to_csv(sys.stdout, sep=",", index=False)
    features_table.head().to_csv(sys.stdout, sep=",", index=False)


# --------------------------------------------------
def extract_matrix_featureCounts(feature_counts: pd.DataFrame) -> pd.DataFrame:
    """Extract the counts matrix from featureCounts

    :param feature_counts: A merged DataFrame of featureCounts
    :type feature_counts: pd.DataFrame
    :return: Only the Geneids and counts sample columns from feature_counts, i.e. the counts matrix.
    :rtype: pd.DataFrame
    """
    # extract featureCounts counts matrix
    gene_metadata_labels = ["Chr", "Start", "End", "Strand", "Length"]
    
    return feature_counts.drop(columns=gene_metadata_labels)


def extract_features_featureCounts(feature_counts: pd.DataFrame) -> pd.DataFrame:
    """Extract the features metadata from featureCounts

    :param feature_counts: A merged DataFrame of featureCounts.
    :type feature_counts: pd.DataFrame
    :return: Only the Geneids and features metadata.
    :rtype: pd.DataFrame
    """
    # extract featureCounts counts matrix
    gene_metadata_labels = ["Geneid", "Chr", "Start", "End", "Strand", "Length"]
    
    return feature_counts[gene_metadata_labels]


def merge_featureCounts_counts(paths: List[str]) -> pd.DataFrame:
    """Make a merged DataFrame of featureCounts counts

    :param paths: Paths to featureCounts counts files
    :type paths: List[str]
    :return: DataFrame of merged featureCounts counts
    :rtype: pd.DataFrame
    """
    gene_info_labels = ["Geneid", "Chr", "Start", "End", "Strand", "Length"]

    # read first counts file to initialize the merged counts DataFrame
    merged_counts = read_featureCounts_counts(paths[0])
    logging.debug("Counts file used to initialize merged counts: %s", paths[0])

    # read through remaining counts files and merge them into the counts DataFrame
    for counts_file in paths[1:]:
        merged_counts = merged_counts.merge(
            read_featureCounts_counts(counts_file),
            how="outer",
            on=gene_info_labels
        )
        logging.debug("Counts file merged into counts DataFrame: %s", counts_file)

    return merged_counts


def read_featureCounts_counts(path: str) -> pd.DataFrame:
    """Read a file of counts output by featureCounts into a DataFrame

    :param path: Path to featureCounts counts file
    :type path: str
    :return: DataFrame of featureCounts counts
    :rtype: pd.DataFrame
    """
    counts = pd.read_csv(path, sep="\t", comment="#")

    return counts


# --------------------------------------------------
if __name__ == '__main__':
    main()
