nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"

    test("main.nf prints help message") {
        tag 'nf-schema'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                help              = true
            }
        }

        then {
            // It doesn't seem like nf-test supports testing against text printed by log.info, so for now just check that exit code is 0 (workflow succeeds) and no tasks are executed.
            assert workflow.success
            assert workflow.trace.succeeded().size() == 0
        }
    }


    test("main.nf fails -- no project title.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                projectTitle      = null
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) not supplied
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) not supplied
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* Missing required parameter(s): projectTitle")
        }

    }


    test("main.nf fails -- spaces in `params.projectTitle`.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                projectTitle      = 'project title'
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains('ERROR ~ Validation of pipeline parameters failed!')
            assert workflow.stderr.contains("* --projectTitle (project title): Project title can ony contain alphanumeric characters, '.', '_', or '-'.")
        }

    }


    test("main.nf fails -- slashes in `params.projectTitle`.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                projectTitle      = 'project/title'
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains('ERROR ~ Validation of pipeline parameters failed!')
            assert workflow.stderr.contains("* --projectTitle (project/title): Project title can ony contain alphanumeric characters, '.', '_', or '-'.")
        }

    }


    test("main.nf fails -- no input samplesheet.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                samplesheet       = null
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) not supplied
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) not supplied
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* Missing required parameter(s): samplesheet")
        }

    }


    test("main.nf fails -- .txt file for `params.samplesheet`.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                samplesheet       = "${projectDir}/tests/data/samplesheets/invalid/samplesheet_not_csv_file.txt"
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
        }

    }


    test("main.nf fails -- file name with spaces for `params.samplesheet`.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                samplesheet       = "${projectDir}/tests/data/samplesheets/invalid/spaces in samplesheet name.csv"
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
        }

    }


    test("main.nf fails -- no reference genome.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                genome            = null
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* Missing required parameter(s): genome")
        }

    }


    test("main.nf fails -- no reference annotations.") {
        tag 'nf-schema'
        tag 'validate'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                annotations       = null
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* Missing required parameter(s): annotations")
        }

    }


    test("main.nf fails -- no trim tool.") {
        tag 'nf-schema'
        tag 'validate'
        tag 'tools'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                trimTool          = null
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* Missing required parameter(s): trimTool")
        }

    }


    test("main.nf fails -- invalid trim tool.") {
        tag 'nf-schema'
        tag 'validate'
        tag 'tools'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                trimTool          = 'bowtie2'
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* --trimTool (bowtie2): Trim tool must be one of the valid options: [fastp, cutadapt].")
        }

    }


    test("main.nf fails -- no map tool.") {
        tag 'nf-schema'
        tag 'validate'
        tag 'tools'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                mapTool           = null
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* Missing required parameter(s): mapTool")
        }

    }


    test("main.nf fails -- invalid map tool.") {
        tag 'nf-schema'
        tag 'validate'
        tag 'tools'

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                mapTool           = 'trimmomatic'
            }
        }

        then {
            // nf-schema validateParameters() causes workflow failure with exit status 1 when required param(s) don't match pattern
            assert workflow.failed
            assert workflow.exitStatus == 1
            // nf-schema validateParameters() throws error messages on stdout and stderr when required param(s) don't match pattern
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
            assert workflow.stderr.contains("* --mapTool (trimmomatic): Map tool must be one of the valid options: [bwamem2, star].")
        }

    }


    test("main.nf succeeds with default `nf_test` params") {
        tag 'full'

        // instantiate helper objects
        def readsSELane1 = new ReadsSELane1()
        def readsSELane2 = new ReadsSELane2()
        def readsPELane1 = new ReadsPELane1()
        def readsPELane2 = new ReadsPELane2()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
        }

        then {
            // test workflow status
            assert workflow.success
            /*
                Count number succeeded tasks:
                    Check quality:
                        - 1: Count bases in genome
                        - 4: MultiQC -- Reads, mappings, RNA-seq, full
                        - 2 * (n fastq pairs): FastQC -- Raw and prealigned
                        - 2 * (n fastq pairs): Samtools idxstats and flagstat
                        - 2 * (n samples): Count bases in reads -- Raw and prealigned
                        - 1 * (n samples): Samtools stats
                        - 1 * (n samples): Qualimap RNA-seq
                    Map reads:
                        - 1: Build reference genome index
                        - 1 * (n fastq pairs): Map reads
                        - 1 * (n fastq pairs): Sort and index SAMs
                        - 3 * (n samples): Merge SAM, Mark dups, Sort by name
                    Prepare inputs:
                        - 2: Unzip genome and annotations
                        - 1: Index fasta
                    Process reads:
                        - 1 * (n fastq pairs): Trim reads
                    Quantify
                        - 1: Combine featureCounts into counts table
                        - 1 * (n samples): Quantify with featureCounts
            */
            Integer expectedSucceededTraces = new TraceSucceededMainWorkflow(
                [
                    constants: 10,
                    nFastqPairs: 4,
                    fastqPairsTasks: 7,
                    nSamples: 2,
                    samplesTasks: 7,
                ]
            ).size()
            assert workflow.trace.succeeded().size() == expectedSucceededTraces

            // test raw FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.zip").exists()
            // test prealign FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.zip").exists()
            // test trimmed reads logs published to reports dir
            assert path("${params.publishDirReports}/.reads/trim/${readsSELane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsSELane2.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsPELane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsPELane2.getStemName()}_fastp.json").exists()
            // test samtools flagstat and samtools idxstats for individual alignments files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane2.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane2.getStemName()}_samtools-flagstat.txt").exists()
            // test samtools stats for merged alignments files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getSampleName()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getSampleName()}_samtools-stats.txt").exists()
            // test BAM and BAM.BAI alignment and index files published to data dir
            assert path("${params.publishDirData}/alignments/${readsSELane1.getSampleName()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsSELane1.getSampleName()}.bam.bai").exists()
            assert path("${params.publishDirData}/alignments/${readsPELane1.getSampleName()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsPELane1.getSampleName()}.bam.bai").exists()
            // test qualimap rnaseq QC directory is written to reports dir
            assert path("${params.publishDirReports}/rnaseq/qualimap/${readsSELane1.getSampleName()}_rnaseq_qc").exists()
            assert path("${params.publishDirReports}/rnaseq/qualimap/${readsPELane1.getSampleName()}_rnaseq_qc").exists()
            // test featureCounts counts files published to data dir
            assert path("${params.publishDirData}/counts/${readsSELane1.getSampleName()}.txt").exists()
            assert path("${params.publishDirData}/counts/${readsPELane1.getSampleName()}.txt").exists()
            // test featureCounts summary files published to reports dir
            assert path("${params.publishDirReports}/counts/${readsSELane1.getSampleName()}.txt.summary").exists()
            assert path("${params.publishDirReports}/counts/${readsPELane1.getSampleName()}.txt.summary").exists()
            // test merged counts files and feature metadata published to data dir
            assert path("${params.publishDirData}/counts/rnaseq_nf-test_counts.csv").exists()
            assert path("${params.publishDirData}/counts/rnaseq_nf-test_counts_feature_metadata.csv").exists()
            // test MultiQC reports and data published to reports dir
            assert path("${params.publishDirReports}/multiqc/reads/reads.html").exists()
            assert path("${params.publishDirReports}/multiqc/reads/reads_data/").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments.html").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments_data/").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq/rnaseq.html").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq/rnaseq_data/").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq_nf-test/rnaseq_nf-test.html").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq_nf-test/rnaseq_nf-test_data/").exists()
        }

    }


    test("main.nf succeeds with default `nf_test` params and uncompressed genome and annotation files.") {
        tag 'full'

        // instantiate helper objects
        def readsSELane1 = new ReadsSELane1()
        def readsSELane2 = new ReadsSELane2()
        def readsPELane1 = new ReadsPELane1()
        def readsPELane2 = new ReadsPELane2()
        def refs         = new RefsEnsembl()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                genome            = "${projectDir}/${refs.getGenome()}"
                annotations       = "${projectDir}/${refs.getGTF()}"
            }
        }

        then {
            // test workflow status
            assert workflow.success
            /*
                Count number succeeded tasks:
                    Check quality:
                        - 1: Count bases in genome
                        - 3: MultiQC -- Reads, mappings, full
                        - 2 * (n fastq pairs): FastQC -- Raw and prealigned
                        - 2 * (n fastq pairs): Samtools idxstats and flagstat
                        - 2 * (n samples): Count bases in reads -- Raw and prealigned
                        - 1 * (n samples): Samtools stats
                    Map reads:
                        - 1: Build reference genome index
                        - 1 * (n fastq pairs): Map reads
                        - 1 * (n fastq pairs): Sort and index SAMs
                        - 3 * (n samples): Merge SAM, Mark dups, Sort by name
                    Prepare inputs:
                        - 1: Index fasta
                    Process reads:
                        - 1 * (n fastq pairs): Trim reads
            */
            Integer expectedSucceededTraces = new TraceSucceededMainWorkflow(
                [
                    constants: 6,
                    nFastqPairs: 4,
                    fastqPairsTasks: 7,
                    nSamples: 2,
                    samplesTasks: 6,
                ]
            ).size()
            assert workflow.trace.succeeded().size() == expectedSucceededTraces

            // test raw FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.zip").exists()
            // test prealign FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.zip").exists()
            // test trimmed reads logs published to reports dir
            assert path("${params.publishDirReports}/.reads/trim/${readsSELane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsSELane2.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsPELane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsPELane2.getStemName()}_fastp.json").exists()
            // test samtools stats and samtools idxstats files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane2.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane2.getStemName()}_samtools-flagstat.txt").exists()
            // test samtools stats for merged alignments files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getSampleName()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getSampleName()}_samtools-stats.txt").exists()
            // test BAM and BAM.BAI alignment and index files published to data dir
            assert path("${params.publishDirData}/alignments/${readsSELane1.getSampleName()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsSELane1.getSampleName()}.bam.bai").exists()
            assert path("${params.publishDirData}/alignments/${readsPELane1.getSampleName()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsPELane1.getSampleName()}.bam.bai").exists()
            // test qualimap rnaseq QC directory is written to reports dir
            assert path("${params.publishDirReports}/rnaseq/qualimap/${readsSELane1.getSampleName()}_rnaseq_qc").exists()
            assert path("${params.publishDirReports}/rnaseq/qualimap/${readsPELane1.getSampleName()}_rnaseq_qc").exists()
            // test featureCounts counts files published to data dir
            assert path("${params.publishDirData}/counts/${readsSELane1.getSampleName()}.txt").exists()
            assert path("${params.publishDirData}/counts/${readsPELane1.getSampleName()}.txt").exists()
            // test featureCounts summary files published to reports dir
            assert path("${params.publishDirReports}/counts/${readsSELane1.getSampleName()}.txt.summary").exists()
            assert path("${params.publishDirReports}/counts/${readsPELane1.getSampleName()}.txt.summary").exists()
            // test merged counts files and feature metadata published to data dir
            assert path("${params.publishDirData}/counts/rnaseq_nf-test_counts.csv").exists()
            assert path("${params.publishDirData}/counts/rnaseq_nf-test_counts_feature_metadata.csv").exists()
            // test MultiQC reports and data published to reports dir
            assert path("${params.publishDirReports}/multiqc/reads/reads.html").exists()
            assert path("${params.publishDirReports}/multiqc/reads/reads_data/").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments.html").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments_data/").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq/rnaseq.html").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq/rnaseq_data/").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq_nf-test/rnaseq_nf-test.html").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq_nf-test/rnaseq_nf-test_data/").exists()
        }

    }


    test("main.nf succeeds -- cutadapt.") {
        tag 'full'

        // instantiate helper objects
        def readsSELane1 = new ReadsSELane1()
        def readsSELane2 = new ReadsSELane2()
        def readsPELane1 = new ReadsPELane1()
        def readsPELane2 = new ReadsPELane2()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                trimTool          = 'cutadapt'
            }
        }

        then {
            // test workflow status
            assert workflow.success
            /*
                Count number succeeded tasks:
                    Check quality:
                        - 1: Count bases in genome
                        - 3: MultiQC -- Reads, mappings, full
                        - 2 * (n fastq pairs): FastQC -- Raw and prealigned
                        - 2 * (n fastq pairs): Samtools idxstats and flagstat
                        - 2 * (n samples): Count bases in reads -- Raw and prealigned
                        - 1 * (n samples): Samtools stats
                    Map reads:
                        - 1: Build reference genome index
                        - 1 * (n fastq pairs): Map reads
                        - 1 * (n fastq pairs): Sort and index SAMs
                        - 3 * (n samples): Merge SAM, Mark dups, Sort by name
                    Prepare inputs:
                        - 2: Unzip genome and annotations
                        - 1: Index fasta
                    Process reads:
                        - 1 * (n fastq pairs): Trim reads
            */
            Integer expectedSucceededTraces = new TraceSucceededMainWorkflow(
                [
                    constants: 8,
                    nFastqPairs: 4,
                    fastqPairsTasks: 7,
                    nSamples: 2,
                    samplesTasks: 6,
                ]
            ).size()
            assert workflow.trace.succeeded().size() == expectedSucceededTraces

            // test raw FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.zip").exists()
            // test prealign FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.zip").exists()
            // test trimmed reads logs published to reports dir
            assert path("${params.publishDirReports}/.reads/trim/${readsSELane1.getStemName()}_cutadapt-log.txt").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsSELane2.getStemName()}_cutadapt-log.txt").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsPELane1.getStemName()}_cutadapt-log.txt").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsPELane2.getStemName()}_cutadapt-log.txt").exists()
            // test samtools stats and samtools idxstats files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane2.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane2.getStemName()}_samtools-flagstat.txt").exists()
            // test samtools stats for merged alignments files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getSampleName()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getSampleName()}_samtools-stats.txt").exists()
            // test BAM and BAM.BAI alignment and index files published to data dir
            assert path("${params.publishDirData}/alignments/${readsSELane1.getSampleName()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsSELane1.getSampleName()}.bam.bai").exists()
            assert path("${params.publishDirData}/alignments/${readsPELane1.getSampleName()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsPELane1.getSampleName()}.bam.bai").exists()
            // test qualimap rnaseq QC directory is written to reports dir
            assert path("${params.publishDirReports}/rnaseq/qualimap/${readsSELane1.getSampleName()}_rnaseq_qc").exists()
            assert path("${params.publishDirReports}/rnaseq/qualimap/${readsPELane1.getSampleName()}_rnaseq_qc").exists()
            // test featureCounts counts files published to data dir
            assert path("${params.publishDirData}/counts/${readsSELane1.getSampleName()}.txt").exists()
            assert path("${params.publishDirData}/counts/${readsPELane1.getSampleName()}.txt").exists()
            // test featureCounts summary files published to reports dir
            assert path("${params.publishDirReports}/counts/${readsSELane1.getSampleName()}.txt.summary").exists()
            assert path("${params.publishDirReports}/counts/${readsPELane1.getSampleName()}.txt.summary").exists()
            // test merged counts files and feature metadata published to data dir
            assert path("${params.publishDirData}/counts/rnaseq_nf-test_counts.csv").exists()
            assert path("${params.publishDirData}/counts/rnaseq_nf-test_counts_feature_metadata.csv").exists()
            // test MultiQC reports and data published to reports dir
            assert path("${params.publishDirReports}/multiqc/reads/reads.html").exists()
            assert path("${params.publishDirReports}/multiqc/reads/reads_data/").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments.html").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments_data/").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq/rnaseq.html").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq/rnaseq_data/").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq_nf-test/rnaseq_nf-test.html").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq_nf-test/rnaseq_nf-test_data/").exists()
        }

    }

    test("main.nf succeeds -- bwa-mem2.") {
        tag 'full'

        // instantiate helper objects
        def readsSELane1 = new ReadsSELane1()
        def readsSELane2 = new ReadsSELane2()
        def readsPELane1 = new ReadsPELane1()
        def readsPELane2 = new ReadsPELane2()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
                mapTool           = 'bwamem2'
            }
        }

        then {
            // test workflow status
            assert workflow.success
                        /*
                Count number succeeded tasks:
                    Check quality:
                        - 1: Count bases in genome
                        - 3: MultiQC -- Reads, mappings, full
                        - 2 * (n fastq pairs): FastQC -- Raw and prealigned
                        - 2 * (n fastq pairs): Samtools idxstats and flagstat
                        - 2 * (n samples): Count bases in reads -- Raw and prealigned
                        - 1 * (n samples): Samtools stats
                    Map reads:
                        - 1: Build reference genome index
                        - 1 * (n fastq pairs): Map reads
                        - 1 * (n fastq pairs): Sort and index SAMs
                        - 3 * (n samples): Merge SAM, Mark dups, Sort by name
                    Prepare inputs:
                        - 2: Unzip genome and annotations
                        - 1: Index fasta
                    Process reads:
                        - 1 * (n fastq pairs): Trim reads
            */
            Integer expectedSucceededTraces = new TraceSucceededMainWorkflow(
                [
                    constants: 8,
                    nFastqPairs: 4,
                    fastqPairsTasks: 7,
                    nSamples: 2,
                    samplesTasks: 6,
                ]
            ).size()
            assert workflow.trace.succeeded().size() == expectedSucceededTraces

            // test raw FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.zip").exists()
            // test prealign FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.zip").exists()
            // test trimmed reads logs published to reports dir
            assert path("${params.publishDirReports}/.reads/trim/${readsSELane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsSELane2.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsPELane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsPELane2.getStemName()}_fastp.json").exists()
            // test samtools stats and samtools idxstats files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane2.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane2.getStemName()}_samtools-flagstat.txt").exists()
            // test samtools stats for merged alignments files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getSampleName()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getSampleName()}_samtools-stats.txt").exists()
            // test BAM and BAM.BAI alignment and index files published to data dir
            assert path("${params.publishDirData}/alignments/${readsSELane1.getSampleName()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsSELane1.getSampleName()}.bam.bai").exists()
            assert path("${params.publishDirData}/alignments/${readsPELane1.getSampleName()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsPELane1.getSampleName()}.bam.bai").exists()
            // test qualimap rnaseq QC directory is written to reports dir
            assert path("${params.publishDirReports}/rnaseq/qualimap/${readsSELane1.getSampleName()}_rnaseq_qc").exists()
            assert path("${params.publishDirReports}/rnaseq/qualimap/${readsPELane1.getSampleName()}_rnaseq_qc").exists()
            // test featureCounts counts files published to data dir
            assert path("${params.publishDirData}/counts/${readsSELane1.getSampleName()}.txt").exists()
            assert path("${params.publishDirData}/counts/${readsPELane1.getSampleName()}.txt").exists()
            // test featureCounts summary files published to reports dir
            assert path("${params.publishDirReports}/counts/${readsSELane1.getSampleName()}.txt.summary").exists()
            assert path("${params.publishDirReports}/counts/${readsPELane1.getSampleName()}.txt.summary").exists()
            // test merged counts files and feature metadata published to data dir
            assert path("${params.publishDirData}/counts/rnaseq_nf-test_counts.csv").exists()
            assert path("${params.publishDirData}/counts/rnaseq_nf-test_counts_feature_metadata.csv").exists()
            // test MultiQC reports and data published to reports dir
            assert path("${params.publishDirReports}/multiqc/reads/reads.html").exists()
            assert path("${params.publishDirReports}/multiqc/reads/reads_data/").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments.html").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments_data/").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq/rnaseq.html").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq/rnaseq_data/").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq_nf-test/rnaseq_nf-test.html").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq_nf-test/rnaseq_nf-test_data/").exists()
        }

    }

    test("main.nf succeeds -- skip raw and prealigned read depth") {
        tag 'full'
        tag 'current'

        // instantiate helper objects
        def readsSELane1 = new ReadsSELane1()
        def readsSELane2 = new ReadsSELane2()
        def readsPELane1 = new ReadsPELane1()
        def readsPELane2 = new ReadsPELane2()

        when {
            params {
                publishDirReports     = "${outputDir}/reports"
                publishDirData        = "${outputDir}/data"
                skipRawReadDepth      = true
                skipPrealignReadDepth = true
            }
        }

        then {
            // test workflow status
            assert workflow.success
            /*
                Count number succeeded tasks:
                    Check quality:
                        - 3: MultiQC -- Reads, mappings, full
                        - 2 * (n fastq pairs): FastQC -- Raw and prealigned
                        - 2 * (n fastq pairs): Samtools idxstats and flagstat
                        - 2 * (n samples): Count bases in reads -- Raw and prealigned
                        - 1 * (n samples): Samtools stats
                    Map reads:
                        - 1: Build reference genome index
                        - 1 * (n fastq pairs): Map reads
                        - 1 * (n fastq pairs): Sort and index SAMs
                        - 3 * (n samples): Merge SAM, Mark dups, Sort by name
                    Prepare inputs:
                        - 2: Unzip genome and annotations
                        - 1: Index fasta
                    Process reads:
                        - 1 * (n fastq pairs): Trim reads
            */
            Integer expectedSucceededTraces = new TraceSucceededMainWorkflow(
                [
                    constants: 7,
                    nFastqPairs: 4,
                    fastqPairsTasks: 7,
                    nSamples: 2,
                    samplesTasks: 4,
                ]
            ).size()
            assert workflow.trace.succeeded().size() == expectedSucceededTraces

            // test raw FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.zip").exists()
            // test prealign FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.zip").exists()
            // test trimmed reads logs published to reports dir
            assert path("${params.publishDirReports}/.reads/trim/${readsSELane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsSELane2.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsPELane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsPELane2.getStemName()}_fastp.json").exists()
            // test samtools flagstat and samtools idxstats for individual alignments files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane2.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane2.getStemName()}_samtools-flagstat.txt").exists()
            // test samtools stats for merged alignments files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getSampleName()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getSampleName()}_samtools-stats.txt").exists()
            // test BAM and BAM.BAI alignment and index files published to data dir
            assert path("${params.publishDirData}/alignments/${readsSELane1.getSampleName()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsSELane1.getSampleName()}.bam.bai").exists()
            assert path("${params.publishDirData}/alignments/${readsPELane1.getSampleName()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsPELane1.getSampleName()}.bam.bai").exists()
            // test qualimap rnaseq QC directory is written to reports dir
            assert path("${params.publishDirReports}/rnaseq/qualimap/${readsSELane1.getSampleName()}_rnaseq_qc").exists()
            assert path("${params.publishDirReports}/rnaseq/qualimap/${readsPELane1.getSampleName()}_rnaseq_qc").exists()
            // test featureCounts counts files published to data dir
            assert path("${params.publishDirData}/counts/${readsSELane1.getSampleName()}.txt").exists()
            assert path("${params.publishDirData}/counts/${readsPELane1.getSampleName()}.txt").exists()
            // test featureCounts summary files published to reports dir
            assert path("${params.publishDirReports}/counts/${readsSELane1.getSampleName()}.txt.summary").exists()
            assert path("${params.publishDirReports}/counts/${readsPELane1.getSampleName()}.txt.summary").exists()
            // test merged counts files and feature metadata published to data dir
            assert path("${params.publishDirData}/counts/rnaseq_nf-test_counts.csv").exists()
            assert path("${params.publishDirData}/counts/rnaseq_nf-test_counts_feature_metadata.csv").exists()
            // test MultiQC reports and data published to reports dir
            assert path("${params.publishDirReports}/multiqc/reads/reads.html").exists()
            assert path("${params.publishDirReports}/multiqc/reads/reads_data/").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments.html").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments_data/").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq/rnaseq.html").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq/rnaseq_data/").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq_nf-test/rnaseq_nf-test.html").exists()
            assert path("${params.publishDirReports}/multiqc/rnaseq_nf-test/rnaseq_nf-test_data/").exists()
        }

    }

    test("main.nf succeeds -- skip raw and prealigned read depth") {
        tag 'full'
        tag 'current'

        // instantiate helper objects
        def readsSELane1 = new ReadsSELane1()
        def readsSELane2 = new ReadsSELane2()
        def readsPELane1 = new ReadsPELane1()
        def readsPELane2 = new ReadsPELane2()

        when {
            params {
                publishDirReports     = "${outputDir}/reports"
                publishDirData        = "${outputDir}/data"
                skipRawReadDepth      = true
                skipPrealignReadDepth = true
            }
        }

        then {
            // test workflow status
            assert workflow.success
            /*
                Count number succeeded tasks:
                    Check quality:
                        - 3: MultiQC -- Reads, mappings, full
                        - 2 * (n fastq pairs): FastQC -- Raw and prealigned
                        - 2 * (n fastq pairs): Samtools idxstats and flagstat
                        - 2 * (n samples): Count bases in reads -- Raw and prealigned
                        - 1 * (n samples): Samtools stats
                    Map reads:
                        - 1: Build reference genome index
                        - 1 * (n fastq pairs): Map reads
                        - 1 * (n fastq pairs): Sort and index SAMs
                        - 3 * (n samples): Merge SAM, Mark dups, Sort by name
                    Prepare inputs:
                        - 2: Unzip genome and annotations
                        - 1: Index fasta
                    Process reads:
                        - 1 * (n fastq pairs): Trim reads
            */
            Integer expectedSucceededTraces = new TraceSucceededMainWorkflow(
                [
                    constants: 7,
                    nFastqPairs: 4,
                    fastqPairsTasks: 7,
                    nSamples: 2,
                    samplesTasks: 4,
                ]
            ).size()
            assert workflow.trace.succeeded().size() == expectedSucceededTraces

            // test raw FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_raw_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_raw_R2_fastqc.zip").exists()
            // test prealign FastQC html reports and zip files published to reports dir
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsSELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane1.getStemName()}_trimmed_R2_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R1_fastqc.zip").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.html").exists()
            assert path("${params.publishDirReports}/.fastqc/${readsPELane2.getStemName()}_trimmed_R2_fastqc.zip").exists()
            // test trimmed reads logs published to reports dir
            assert path("${params.publishDirReports}/.reads/trim/${readsSELane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsSELane2.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsPELane1.getStemName()}_fastp.json").exists()
            assert path("${params.publishDirReports}/.reads/trim/${readsPELane2.getStemName()}_fastp.json").exists()
            // test samtools flagstat and samtools idxstats for individual alignments files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane2.getStemName()}_idxstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsSELane2.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getStemName()}_samtools-flagstat.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane2.getStemName()}_samtools-flagstat.txt").exists()
            // test samtools stats for merged alignments files written to reports dir
            assert path("${params.publishDirReports}/.alignments/${readsSELane1.getSampleName()}_samtools-stats.txt").exists()
            assert path("${params.publishDirReports}/.alignments/${readsPELane1.getSampleName()}_samtools-stats.txt").exists()
            // test BAM and BAM.BAI alignment and index files published to data dir
            assert path("${params.publishDirData}/alignments/${readsSELane1.getSampleName()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsSELane1.getSampleName()}.bam.bai").exists()
            assert path("${params.publishDirData}/alignments/${readsPELane1.getSampleName()}.bam").exists()
            assert path("${params.publishDirData}/alignments/${readsPELane1.getSampleName()}.bam.bai").exists()
            // test MultiQC reports and data published to reports dir
            assert path("${params.publishDirReports}/multiqc/reads/reads.html").exists()
            assert path("${params.publishDirReports}/multiqc/reads/reads_data/").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments.html").exists()
            assert path("${params.publishDirReports}/multiqc/alignments/alignments_data/").exists()
            assert path("${params.publishDirReports}/multiqc/ngs_nf-test/ngs_nf-test.html").exists()
            assert path("${params.publishDirReports}/multiqc/ngs_nf-test/ngs_nf-test_data/").exists()
        }

    }

}
