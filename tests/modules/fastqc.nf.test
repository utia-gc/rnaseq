nextflow_process {

    name "Test Process fastqc"
    script "modules/fastqc.nf"
    process "fastqc"

    test("fastqc runs QC on fastqs -- SE reads raw.") {
        // instantiate helper objects
        def readsLane1 = new ReadsSELane1()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    [
                        sampleName:   "${readsLane1.getSampleName()}",
                        sampleNumber: "${readsLane1.getSampleNumber()}",
                        lane:         "${readsLane1.getLane()}",
                        readType:     "${readsLane1.getReadType()}",
                        trimStatus:   "raw"
                    ],
                    file("${projectDir}/${readsLane1.getR1()}"),
                    file("${projectDir}/${readsLane1.getR2()}")
                ]
                """
            }
        }

        then {
            // test process success
            assert process.success

            // test html output
            with(process.out.html) {
                assert size() == 1
                assert get(0) ==~ /^.*\/${readsLane1.getStemName()}_raw_R1_fastqc.html/
            }
            // test zip output
            with(process.out.zip) {
                assert size() == 1
                assert get(0) ==~ /^.*\/${readsLane1.getStemName()}_raw_R1_fastqc.zip/
            }
        }

    }

    test("fastqc runs QC on fastqs -- PE reads raw.") {
        // instantiate helper objects
        def readsLane1 = new ReadsPELane1()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    [
                        sampleName:   "${readsLane1.getSampleName()}",
                        sampleNumber: "${readsLane1.getSampleNumber()}",
                        lane:         "${readsLane1.getLane()}",
                        readType:     "${readsLane1.getReadType()}",
                        trimStatus:   "raw"
                    ],
                    file("${projectDir}/${readsLane1.getR1()}"),
                    file("${projectDir}/${readsLane1.getR2()}")
                ]
                """
            }
        }

        then {
            // test process success
            assert process.success

            // test html output
            with(process.out.html.get(0)) {
                assert size() == 2
                assert get(0) ==~ /^.*\/${readsLane1.getStemName()}_raw_R1_fastqc.html/
                assert get(1) ==~ /^.*\/${readsLane1.getStemName()}_raw_R2_fastqc.html/
            }
            // test zip output
            with(process.out.zip.get(0)) {
                assert size() == 2
                assert get(0) ==~ /^.*\/${readsLane1.getStemName()}_raw_R1_fastqc.zip/
                assert get(1) ==~ /^.*\/${readsLane1.getStemName()}_raw_R2_fastqc.zip/
            }
        }

    }

    test("fastqc runs QC on fastqs -- SE reads trimmed.") {
        // instantiate helper objects
        def readsLane1 = new ReadsSELane1()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    [
                        sampleName:   "${readsLane1.getSampleName()}",
                        sampleNumber: "${readsLane1.getSampleNumber()}",
                        lane:         "${readsLane1.getLane()}",
                        readType:     "${readsLane1.getReadType()}",
                        trimStatus:   "trimmed"
                    ],
                    file("${projectDir}/${readsLane1.getR1()}"),
                    file("${projectDir}/${readsLane1.getR2()}")
                ]
                """
            }
        }

        then {
            // test process success
            assert process.success

            // test html output
            with(process.out.html) {
                assert size() == 1
                assert get(0) ==~ /^.*\/${readsLane1.getStemName()}_trimmed_R1_fastqc.html/
            }
            // test zip output
            with(process.out.zip) {
                assert size() == 1
                assert get(0) ==~ /^.*\/${readsLane1.getStemName()}_trimmed_R1_fastqc.zip/
            }
        }

    }

    test("fastqc runs QC on fastqs -- PE reads trimmed.") {
        // instantiate helper objects
        def readsLane1 = new ReadsPELane1()

        when {
            params {
                publishDirReports = "${outputDir}/reports"
                publishDirData    = "${outputDir}/data"
            }
            process {
                """
                input[0] = [
                    [
                        sampleName:   "${readsLane1.getSampleName()}",
                        sampleNumber: "${readsLane1.getSampleNumber()}",
                        lane:         "${readsLane1.getLane()}",
                        readType:     "${readsLane1.getReadType()}",
                        trimStatus:   "trimmed"
                    ],
                    file("${projectDir}/${readsLane1.getR1()}"),
                    file("${projectDir}/${readsLane1.getR2()}")
                ]
                """
            }
        }

        then {
            // test process success
            assert process.success

            // test html output
            with(process.out.html.get(0)) {
                assert size() == 2
                assert get(0) ==~ /^.*\/${readsLane1.getStemName()}_trimmed_R1_fastqc.html/
                assert get(1) ==~ /^.*\/${readsLane1.getStemName()}_trimmed_R2_fastqc.html/
            }
            // test zip output
            with(process.out.zip.get(0)) {
                assert size() == 2
                assert get(0) ==~ /^.*\/${readsLane1.getStemName()}_trimmed_R1_fastqc.zip/
                assert get(1) ==~ /^.*\/${readsLane1.getStemName()}_trimmed_R2_fastqc.zip/
            }
        }

    }

}
